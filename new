#include <iostream> // Mainan buat ngomong sama komputer (nampilin output dan terima input)
#include <string>   // Mainan buat nampung kata-kata (string)
using namespace std; // Biar gak repot nulis std:: terus

struct FoodData { // Kotak data buat nyimpen info makanan
    string food;       // Nama makanan, misalnya "nasi goreng"
    int price;         // Harga makanan, misalnya 10000
    string category;   // Kategori makanan, misalnya "pedas"
    bool available;    // Ketersediaan makanan (1 = ada, 0 = gak ada)
    FoodData* next;    // Penunjuk ke kotak makanan selanjutnya (makanan berikutnya)
    FoodData* prev;    // Penunjuk ke kotak makanan sebelumnya (makanan sebelumnya)
};

FoodData* head = nullptr;    // Penunjuk ke makanan pertama, masih kosong
FoodData* tail = nullptr;    // Penunjuk ke makanan terakhir, masih kosong
FoodData* current = nullptr; // Penunjuk ke makanan yang lagi diproses, masih kosong

void addFood() { // Fungsi buat nambah makanan baru ke list
    FoodData* newFood = new FoodData; // Bikin kotak makanan baru di memori
    cout << "Food's name: "; getline(cin, newFood->food); // Tanya nama makanan, simpan di newFood->food
    cout << "Price: "; cin >> newFood->price; cin.ignore(); // Tanya harga makanan, simpan di newFood->price, terus bersihin sisa input (enter)
    cout << "Category: "; getline(cin, newFood->category); // Tanya kategori makanan, simpan di newFood->category
    cout << "Available (1 for Yes, 0 for No): "; cin >> newFood->available; cin.ignore(); // Tanya ketersediaan makanan, simpan di newFood->available, terus bersihin sisa input

    newFood->next = nullptr; // Set kotak makanan baru ini sebagai yang terakhir (tidak ada yang di depannya)
    newFood->prev = tail;    // Sambung kotak baru ke makanan terakhir yang sudah ada (tail)
    if (!head) head = newFood; // Kalau belum ada makanan (head masih kosong), jadikan newFood sebagai makanan pertama
    if (tail) tail->next = newFood; // Kalau udah ada makanan, sambungkan makanan terakhir lama (tail) ke newFood
    tail = newFood; // Set newFood sebagai makanan terakhir (tail) yang baru saja ditambah
}

void displayFood(FoodData* food) { // Fungsi buat nampilin data satu makanan, parameternya food (kotak makanan yang mau ditampilin)
    if (food) { // Cek dulu, kalau food gak kosong (ada datanya), baru ditampilin
        cout << "--------------------------------------\n"; // Garis pembatas biar rapih
        cout << "| Food: " << food->food << "\n"; // Nampilin nama makanan
        cout << "| Price: Rp " << food->price << "\n"; // Nampilin harga makanan (pake format rupiah biar keren)
        cout << "| Category: " << food->category << "\n"; // Nampilin kategori makanan
        cout << "| Available: " << (food->available ? "Yes" : "No") << "\n"; // Nampilin ketersediaan, kalau available = 1 jadi "Yes", kalau 0 jadi "No"
        cout << "--------------------------------------\n"; // Tutup garis pembatas
    }
}

void findFood() { // Fungsi buat nyari makanan berdasarkan nama
    cout << "Insert the food name you want to find\n> "; // Nanya ke user nama makanan yang mau dicari
    string name; // Bikin variabel buat nampung nama makanan yang dicari
    getline(cin, name); // Ambil input nama makanannya dari user

    FoodData* temp = head; // Bikin pointer temp buat mulai nyari dari makanan pertama (head)
    while (temp) { // Looping selama masih ada makanan di list
        if (temp->food == name) { // Kalau nama makanan di kotak ini sama dengan yang dicari
            cout << name << "'s data found\n"; // Kasih tau kalau datanya ketemu
            displayFood(temp); // Panggil fungsi displayFood buat nampilin datanya
            cout << "Press Enter to Continue!!\n"; // Kasih jeda biar user bisa baca dulu
            cin.ignore(); // Tunggu user pencet enter
            return; // Keluar dari fungsi, karena datanya udah ketemu
        }
        temp = temp->next; // Lanjut ke makanan berikutnya di list
    }
    
    // Kalau keluar dari loop berarti datanya gak ketemu
    cout << name << "'s data not found\n"; // Kasih tau kalau makanannya gak ketemu
    cout << "Press Enter to Continue!!\n"; // Kasih jeda biar user bisa baca
    cin.ignore(); // Tunggu user pencet enter
}

void changeFood() { // Fungsi buat ubah data makanan yang udah ada
    cout << "Insert the food name you want to change\n> "; // Nanya ke user, makanan mana yang mau diubah
    string name; // Bikin variabel buat nyimpen nama makanan yang mau diubah
    getline(cin, name); // Ambil nama makanan dari user (bisa nama yang ada spasi juga)

    FoodData* temp = head; // Bikin pointer temp buat mulai nyari dari makanan pertama (head)
    while (temp) { // Looping selama masih ada makanan di list
        if (temp->food == name) { // Kalau nama makanan di kotak ini sama kayak yang dicari
            cout << "- Changing " << name << "'s data\n"; // Kasih tau kalau kita mau ubah data makanan ini
            cout << "1. Change Price\n2. Change Category\n3. Change Availability\n> "; // Pilihan data yang mau diubah

            int choice; // Variabel buat nyimpen pilihan user
            cin >> choice; cin.ignore(); // Ambil input pilihan user, terus bersihin buffer biar gak error

            if (choice == 1) { // Kalau user pilih 1, berarti mau ubah harga
                cout << "Insert the new price\n> "; // Nanya harga baru
                cin >> temp->price; cin.ignore(); // Simpan harga baru ke dalam kotak makanan ini
            } else if (choice == 2) { // Kalau user pilih 2, berarti mau ubah kategori
                cout << "Insert the new category\n> "; // Nanya kategori baru
                getline(cin, temp->category); // Simpan kategori baru
            } else if (choice == 3) { // Kalau user pilih 3, berarti mau ubah ketersediaan
                cout << "Is the food available? (1 for Yes, 0 for No)\n> "; // Nanya apakah makanan tersedia atau nggak
                cin >> temp->available; cin.ignore(); // Simpan ketersediaan baru
            }

            cout << name << "'s data has been updated\n"; // Kasih tau kalau datanya udah diubah
            displayFood(temp); // Tampilkan data yang baru diubah biar user bisa lihat hasilnya
            cout << "Press Enter to Continue!!\n"; // Kasih waktu buat user baca
            cin.ignore(); // Tunggu user pencet enter
            return; // Keluar dari fungsi, karena data udah ketemu dan diubah
        }
        temp = temp->next; // Kalau belum ketemu, lanjut ke makanan berikutnya
    }

    cout << name << "'s data not found\n"; // Kalau keluar dari loop, berarti datanya gak ketemu
    cout << "Press Enter to Continue!!\n"; // Kasih waktu buat user baca
    cin.ignore(); // Tunggu user pencet enter
}

void deleteFood() { // Fungsi buat hapus makanan dari daftar
    cout << "Insert the food name you want to delete\n> "; // Nanya ke user, makanan mana yang mau dihapus
    string name; // Bikin variabel buat nyimpen nama makanan yang mau dihapus
    getline(cin, name); // Ambil nama makanan dari user (bisa ada spasi)

    FoodData* temp = head; // Bikin pointer temp buat mulai nyari dari makanan pertama (head)
    while (temp) { // Looping selama masih ada makanan di list
        if (temp->food == name) { // Kalau nama makanan di kotak ini sama kayak yang dicari
            displayFood(temp); // Tampilkan dulu data makanan biar user yakin yang mau dihapus ini
            cout << "Are you sure you want to delete? (y/n)\n> "; // Konfirmasi ke user, yakin mau hapus gak?
            char confirm; // Variabel buat nyimpen jawaban user (y/n)
            cin >> confirm; cin.ignore(); // Ambil input jawaban user, terus bersihin buffer biar gak error

            if (confirm == 'y' || confirm == 'Y') { // Kalau user jawab 'y' atau 'Y' berarti setuju hapus
                if (temp->prev) temp->prev->next = temp->next; // Kalau ada makanan sebelumnya, sambungin ke makanan sesudahnya
                if (temp->next) temp->next->prev = temp->prev; // Kalau ada makanan sesudahnya, sambungin ke makanan sebelumnya
                if (temp == head) head = temp->next; // Kalau yang dihapus adalah head, pindahin head ke makanan berikutnya
                if (temp == tail) tail = temp->prev; // Kalau yang dihapus adalah tail, pindahin tail ke makanan sebelumnya

                delete temp; // Hapus kotak makanan ini dari memori
                cout << name << "'s data has been deleted\n"; // Kasih tau kalau datanya udah dihapus
            }

            cout << "Press Enter to Continue!!\n"; // Kasih waktu buat user baca
            cin.ignore(); // Tunggu user pencet enter
            return; // Keluar dari fungsi, karena data udah ketemu dan (mungkin) dihapus
        }
        temp = temp->next; // Kalau belum ketemu, lanjut ke makanan berikutnya
    }

    cout << name << "'s data not found\n"; // Kalau keluar dari loop, berarti datanya gak ketemu
    cout << "Press Enter to Continue!!\n"; // Kasih waktu buat user baca
    cin.ignore(); // Tunggu user pencet enter
}

void seeAllFoods(bool isAdmin) { // Fungsi buat lihat semua makanan, bisa dipakai admin & user
    current = head; // Mulai lihat dari makanan pertama (head)

    while (current) { // Looping selama masih ada makanan di list
        displayFood(current); // Tampilkan data makanan yang lagi diliat

        if (isAdmin) { // Kalau yang lihat itu admin
            cout << "1. Next\n2. Previous\n3. Exit\n> "; // Admin cuma bisa maju, mundur, atau keluar
        } else { // Kalau yang lihat itu user
            cout << "1. Next\n2. Previous\n3. Order\n4. Exit\n> "; // User bisa maju, mundur, pesan, atau keluar
        }

        int choice; // Variabel buat nyimpen pilihan user/admin
        cin >> choice; cin.ignore(); // Ambil input pilihan dan bersihin buffer

        if (choice == 1) { // Kalau pilih "Next" (maju)
            current = current->next ? current->next : head; // Kalau ada makanan berikutnya, maju. Kalau udah mentok, balik ke awal
        } else if (choice == 2) { // Kalau pilih "Previous" (mundur)
            current = current->prev ? current->prev : tail; // Kalau ada makanan sebelumnya, mundur. Kalau udah mentok, balik ke akhir
        } else if (!isAdmin && choice == 3) { // Kalau user pilih "Order" dan bukan admin
            cout << "Ordering " << current->food << "...\n"; // Kasih tau kalau lagi pesan makanan
            cout << "Order placed successfully!\n"; // Kasih tau kalau pesanannya berhasil
        } else break; // Kalau pilih exit atau pilihan gak sesuai, keluar dari loop
    }
}

void adminDashboard() { // Fungsi menu utama buat admin
    while (true) { // Looping terus sampe admin milih keluar
        cout << "======================================\n";
        cout << "ADMIN'S DASHBOARD\n";
        cout << "======================================\n";
        cout << "|1. Add Food's Data\n"; // Tambah data makanan
        cout << "|2. Find Food's Data\n"; // Cari data makanan
        cout << "|3. Delete Food's Data\n"; // Hapus data makanan
        cout << "|4. Change Food's Data\n"; // Ubah data makanan
        cout << "|5. See All Food's Data\n> "; // Lihat semua data makanan

        int choice; // Variabel buat nyimpen pilihan admin
        cin >> choice; cin.ignore(); // Ambil input pilihan dan bersihin buffer

        if (choice == 1) addFood(); // Pilih 1 -> Tambah makanan
        else if (choice == 2) findFood(); // Pilih 2 -> Cari makanan
        else if (choice == 3) deleteFood(); // Pilih 3 -> Hapus makanan
        else if (choice == 4) changeFood(); // Pilih 4 -> Ubah data makanan
        else if (choice == 5) seeAllFoods(true); // Pilih 5 -> Lihat semua makanan (admin mode)
        else break; // Kalau pilihannya gak sesuai, keluar dari menu admin
    }
}

int main() { // Fungsi utama tempat program mulai berjalan
    while (true) { // Looping terus sampe user milih keluar
        cout << "======================================\n";
        cout << "WELCOME TO FOOD MANAGEMENT SYSTEM\n"; // Judul program
        cout << "======================================\n";
        cout << "1. Login as Admin\n"; // Pilihan masuk sebagai admin
        cout << "2. Login as User\n"; // Pilihan masuk sebagai user
        cout << "3. Exit\n> "; // Pilihan buat keluar dari program

        int choice; // Variabel buat nyimpen pilihan user
        cin >> choice; cin.ignore(); // Ambil input pilihan dan bersihin buffer biar gak error

        if (choice == 1) adminDashboard(); // Kalau pilih 1, masuk ke dashboard admin
        else if (choice == 2) seeAllFoods(false); // Kalau pilih 2, masuk ke menu user (false karena bukan admin)
        else break; // Kalau pilih 3 atau angka lain, keluar dari program
    }

    return 0; // Ngasih tau ke sistem kalau program selesai dengan sukses
}
